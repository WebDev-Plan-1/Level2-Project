@use "../abstracts/variables" as v;
@use "../abstracts/mixins" as m;

// ==========================
// Button Primary Mixin
// ==========================
@mixin button-primary {
  //Set backgroundcolor to primarycolor variable
  background-color: v.$primary-color;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  text-decoration: none;
  font-weight: bold;
  border-radius: v.$border-radius;
  -webkit-border-radius: v.$border-radius;
  -moz-border-radius: v.$border-radius;
  -ms-border-radius: v.$border-radius;
  -o-border-radius: v.$border-radius;
  color: #fff;
  padding: v.$spacing-sm v.$spacing-md;
  &:hover {
    // Darken background color by 10%
    background-color: darken(v.$primary-color, 10%);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    color: #fff;
  }
  // Responsive Styles
  @media (max-width: v.$breakpoint-mobile) {
    padding: v.$spacing-sm;
    font-size: 0.9rem;
  }
  @media (min-width: v.$breakpoint-mobile) and (max-width: v.$breakpoint-tablet) {
    padding: v.$spacing-sm;
    font-size: 1rem;
  }
  @media (min-width: v.$breakpoint-tablet) and (max-width: v.$breakpoint-desktop) {
    padding: v.$spacing-sm v.$spacing-md;
    font-size: 1.1rem;
  }
}

// If you want, keep the class for direct use
.button-primary {
  @include button-primary;
}

// ==========================
@mixin section-title {
  // font-size: 2.5rem;
  font-family: v.$font-second;
  margin: v.$spacing-lg 0;
  color: v.$primary-color;
  @include m.responsive-font(1.3rem, 2.5rem);
  @include m.transition(0.3s);
  font-weight: bold;
  text-align: center;
  // Responsive adjustments

  @media (max-width: v.$breakpoint-tablet) {
    font-size: 1.8rem;
    margin-bottom: v.$spacing-lg;
  }
  @media (max-width: v.$breakpoint-mobile) {
    font-size: 1.5rem;
    margin-bottom: v.$spacing-md;
  }
  @media (max-width: v.$breakpoint-watch) {
    font-size: 1.3rem;
    // margin-bottom: v.$spacing-md;
  }
}

// If you want, keep the class for direct use
.section-title {
  @include section-title;
}

// ==========================

@mixin not-found {
  text-align: center;
  color: v.$secondary-color;
  margin: 2rem 0;
  color: rgb(151, 28, 28);
  font-family: v.$font-second;
  font-weight: 600;
  @include m.responsive-font(1rem, 1.2rem);
}

.not-found {
  @include not-found;
}

@mixin empty-section {
  padding: v.$spacing-md 0;
}
.empty-section {
  @include empty-section;
}

// =============Lazy Images=================== //

/* Image wrapper: preserve aspect, show placeholder background */
.img-wrap {
  /*createarelativecontextforoverlayandimage*/
  position: relative;
  /*placeholderbackgroundcolorbeforeimageloads*/
  background: #f0f0f0;
  /*keepoverflowhiddenforroundedcorners*/
  overflow: hidden;
  width: 100%;
  height: 200px;
  /*optionalradius*/
  border-radius: 8px;
  -webkit-border-radius: 8px;
  -moz-border-radius: 8px;
  -ms-border-radius: 8px;
  -o-border-radius: 8px;
}

/* Lazy images base */
.lazy-img {
  /* ensure image covers the wrapper */
  width: 100%;
  height: 100%;
  object-fit: cover;
  /* make it a block-level element */
  display: block;
  /* smooth transition for opacity and filter change */
  transition:
    filter 0.4s ease,
    opacity 0.4s ease;
  /* show as blurred initially */
  filter: blur(16px) scale(1.02);
  opacity: 0;
}

/* When image finished loading: remove blur and show image */
.lazy-img.lazy-loaded {
  /* remove the blur effect */
  filter: none;
  /* full opacity */
  opacity: 1;
}

/* Small devices: reduce blur scale if needed */
@media (max-width: v.$breakpoint-mobile) {
  .lazy-img {
    filter: blur(10px) scale(1.01);
  }
}

/* Skeleton shimmer overlay (optional) */
.img-wrap::after {
  /* shimmering bar to indicate loading */
  content: "";
  position: absolute;
  inset: 0;
  background: linear-gradient(
    90deg,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.35) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: translateX(-100%);
  transition: transform 1.2s linear;
  /* show shimmer while blurred (not after loaded) */
  pointer-events: none;
}

/* Remove shimmer when image loaded */
.lazy-img.lazy-loaded + .img-wrap::after,
.img-wrap .lazy-img.lazy-loaded ~ .img-wrap::after {
  transform: translateX(100%);
  opacity: 0;
}

// ============================ //
